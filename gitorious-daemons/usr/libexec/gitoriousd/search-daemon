#!/usr/bin/env ruby
#
#   Copyright (C) 2013 Gitorious AS
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU Affero General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU Affero General Public License for more details.
#
#   You should have received a copy of the GNU Affero General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.

require File.expand_path(File.dirname(__FILE__) + "/daemon")

class SearchDaemon
  include Gitoriousd::Daemon

  def initialize(name)
    @name = name
  end

  def rails_env
    ENV["RAILS_ENV"] || "production"
  end

  def searchd_pidfile
    Pathname(ENV["GITORIOUS_HOME"]) + "log/searchd.#{rails_env}.pid"
  end

  def searchd_pid
    searchd_pidfile.read
  end

  def searchd_running?
    return false unless searchd_pidfile.exist?
    pid = searchd_pid.to_i
    return false if pid == 0
    begin
      Process.getpgid(pid)
      return true
    rescue Errno::ESRCH
      return false
    end
  end

  def stop_searchd
    if searchd_running?
      pid = searchd_pid.to_i
      Process.kill(:QUIT, pid)
      pid, status = Process.waitpid2(pid)
      return [pid, status]
    end
  end

  def run_searchd
    output = `#{ENV['GITORIOUS_HOME']}/bin/rake ts:start`
    write_to_log_file output
  end

  def run!
    write_to_log_file "Will start searchd"
    daemonize_app do
      begin
        if searchd_running?
          write_to_log_file "Searchd is running with pid #{searchd_pid}, controlled by #{Process.pid}"
        else
          write_to_log_file "Searchd isn't running, starting it"
          run_searchd
        end
      rescue => e
        write_to_log_file "ERROR: #{e.inspect}"
      end

      Signal.trap(:QUIT) do
        pid, status = stop_searchd
        remove_pidfile
        exit status.exitstatus
      end
      Signal.trap(:HUP) {
        stop_searchd
        run_searchd
      }
      loop {
        sleep 1
      }
    end
  end
end

daemon = SearchDaemon.new("search-daemon")
daemon.run!
