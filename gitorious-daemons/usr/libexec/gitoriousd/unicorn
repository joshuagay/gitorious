#!/usr/bin/env ruby
#
#   Copyright (C) 2013 Gitorious AS
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU Affero General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU Affero General Public License for more details.
#
#   You should have received a copy of the GNU Affero General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.

require File.expand_path(File.dirname(__FILE__) + "/daemon")
# TODO: PID manangement
# - probably don't run without config/unicorn.rb
# - retain the new PID when reloading Unicorn
class UnicornDaemon
  include Gitoriousd::Daemon

  def initialize(name)
    @name = name
  end

  def unicorn_command
    unicorn_config = Pathname(ENV["GITORIOUS_HOME"]) + "config/unicorn.rb"
    if unicorn_config.exist?
      cmd = "#{ENV['GITORIOUS_HOME']}/bin/unicorn -c config/unicorn.rb"
    else
      cmd = "#{ENV['GITORIOUS_HOME']}/bin/unicorn -p 3001"
    end
    return cmd
  end

  def run_unicorn
    write_to_log_file "Will run #{unicorn_command}"
    pid = fork do
      exec unicorn_command
    end
    return pid
  end

  def run!
    daemonize_app do
      @unicorn_pid = run_unicorn
      write_to_log_file "Unicorn master running with pid #{@unicorn_pid}, controlled by #{Process.pid}"
      Signal.trap(:QUIT) do
        Process.kill(:QUIT, @unicorn_pid)
        pid, status = Process.waitpid2(@unicorn_pid)
        write_to_log_file "Unicorn with PID #{@unicorn_pid} killed, status was #{status.exitstatus}"
        remove_pidfile
        exit status.exitstatus
      end
      Signal.trap(:HUP) {
        Process.kill(:USR2, @unicorn_pid)
        write_to_log_file "Restarted Unicorn with PID #{@unicorn_pid}"
      }
      Signal.trap(:CHLD) {
        write_to_log_file "Our child just died, exiting."
        Process.wait(@unicorn_pid)
        remove_pidfile
        exit 1
      }
      loop {
        sleep 1
      }
    end
  end
end

daemon = UnicornDaemon.new("unicorn")
daemon.run!
