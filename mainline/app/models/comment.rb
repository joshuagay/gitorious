# encoding: utf-8
#--
#   Copyright (C) 2012-2014 Gitorious AS
#   Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies)
#   Copyright (C) 2008 Johan Sørensen <johan@johansorensen.com>
#   Copyright (C) 2008 David A. Cuadrado <krawek@gmail.com>
#   Copyright (C) 2008 Tor Arne Vestbø <tavestbo@trolltech.com>
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU Affero General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU Affero General Public License for more details.
#
#   You should have received a copy of the GNU Affero General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#++

class Comment < ActiveRecord::Base
  include Gitorious::Authorization

  EDITING_PERIOD = 10.minutes

  belongs_to :user
  belongs_to :target, :polymorphic => true
  belongs_to :project
  has_many   :events, :as => :target, :dependent => :destroy
  serialize :state_change, Array
  attr_accessible(:sha1, :body, :path, :user, :project, :state_change, :lines,
                  :target, :target_id, :target_type, :context, :editable)
  validates_presence_of :user_id, :target, :project_id
  validates_presence_of :body, :if =>  Proc.new {|mr| mr.body_required?}

  scope :with_shas, proc{|*shas|
    {:conditions => { :sha1 => shas.flatten }, :include => :user}
  }

  def state=(new_state)
    return if new_state.blank?
    result = []
    if applies_to_merge_request?
      return if target.status_tag.to_s == new_state
      result << (target.status_tag.nil? ? nil : target.status_tag.name)
    end
    result << new_state
    self.state_change = result
  end

  def state
    state_changed_to
  end

  def state_changed_to
    state_change.to_a.last
  end

  def state_changed_from
    state_change.to_a.size > 1 ? state_change.first : nil
  end

  def body_required?
    if applies_to_merge_request?
      return state_change.blank?
    else
      return true
    end
  end

  # +lines_str+ is a representation of the first and last line-number
  # tuple (as generated by Diff::Unified::Generator) and the lines the
  # comment span, in the follow format:
  # first_tuple:last_tuple+line_span
  def lines=(lines_str)
    start, rest = lines_str.split(":")
    raise "invalid lines format" if rest.blank?
    last, amount = rest.split("+")
    if start.blank? || last.blank? || amount.blank?
      raise "invalid lines format"
    end
    self.first_line_number = start
    self.last_line_number = last
    self.number_of_lines = amount
  end

  def lines
    return nil if self.first_line_number.blank?
    "#{self.first_line_number}:#{self.last_line_number}+#{self.number_of_lines}"
  end

  def sha_range
    first, last = sha1.split("-")
    first..(last||first)
  end

  def applies_to_line_numbers?
    return !first_line_number.blank?
  end

  def applies_to_merge_request?
    MergeRequest === target
  end

  def creator?(a_user)
    a_user == user
  end

  def recently_created?
    created_at > EDITING_PERIOD.ago
  end

  def editable_until
    created_at + EDITING_PERIOD
  end

  def repository
    return target if target.is_a?(Repository)
    return target.source_repository if target.is_a?(MergeRequest)
    target.merge_request.source_repository # MergeRequestVersion
  end
end
